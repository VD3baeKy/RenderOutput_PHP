name: Build and Push Docker Image

on:
  # 手動トリガ
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker image tag (default: latest)'
        required: false
        default: 'latest'
  
  # mainブランチにプッシュされたときにトリガー
  push:
    branches:
      - main
    tags:
      - 'v*'

  # プルリクエスト時はビルドのみ（プッシュしない）
  pull_request:
    branches:
      - main

env:
  REGISTRY: docker.io
  IMAGE_NAME: vd3baeky/renderoutput_php

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Create optimized Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM ubuntu:22.04 AS base

        # タイムゾーンの設定
        ENV DEBIAN_FRONTEND=noninteractive
        ENV TZ=Asia/Tokyo

        # 必要なパッケージのインストール
        RUN apt-get update && apt-get install -y \
            php8.1-fpm \
            php8.1-pgsql \
            php8.1-mbstring \
            php8.1-xml \
            php8.1-curl \
            php8.1-zip \
            php8.1-gd \
            nginx \
            postgresql-client \
            curl \
            && rm -rf /var/lib/apt/lists/* \
            && apt-get clean

        # Nginxの設定
        COPY docker/nginx/default.conf /etc/nginx/conf.d/default.conf
        RUN rm /etc/nginx/sites-enabled/default

        # PHP設定
        COPY docker/php/php.ini /etc/php/8.1/fpm/conf.d/99-custom.ini

        # PHP-FPMの設定
        RUN sed -i 's/listen = \/run\/php\/php8.1-fpm.sock/listen = 0.0.0.0:9000/' /etc/php/8.1/fpm/pool.d/www.conf

        # 作業ディレクトリの設定
        WORKDIR /var/www/html

        # アプリケーションファイルのコピー
        COPY src/ /var/www/html/

        # 権限の設定
        RUN chown -R www-data:www-data /var/www/html \
            && chmod -R 755 /var/www/html

        # ヘルスチェックの追加
        HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
            CMD curl -f http://localhost/ || exit 1

        # 起動スクリプトの作成
        RUN cat > /start.sh << 'SCRIPT'
        #!/bin/bash
        set -e

        # PHP-FPMを起動
        service php8.1-fpm start

        # Nginxをフォアグラウンドで起動
        nginx -g "daemon off;"
        SCRIPT

        RUN chmod +x /start.sh

        EXPOSE 80

        CMD ["/start.sh"]
        EOF

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

    - name: Test Docker image
      if: github.event_name != 'pull_request'
      run: |
        # イメージが正常にビルドされたかテスト
        docker run --rm --name test-container -d -p 8080:80 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        
        # コンテナが起動するまで待機
        sleep 10
        
        # ヘルスチェック
        if curl -f http://localhost:8080; then
          echo "✅ Container health check passed"
        else
          echo "❌ Container health check failed"
          docker logs test-container
          exit 1
        fi
        
        # コンテナを停止
        docker stop test-container

    - name: Image vulnerability scan
      if: github.event_name != 'pull_request'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      if: github.event_name != 'pull_request'
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Log out from Docker Hub
      if: always()
      run: docker logout ${{ env.REGISTRY }}

    - name: Post build summary
      if: github.event_name != 'pull_request'
      run: |
        echo "## 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Image:** ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tags:** ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Platforms:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
        echo "- **Status:** ✅ Successfully built and pushed" >> $GITHUB_STEP_SUMMARY
        
